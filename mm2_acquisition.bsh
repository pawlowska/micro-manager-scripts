import ij.gui.GenericDialog;
import mmcorej.StrVector;
import org.micromanager.MultiStagePosition;
import org.micromanager.PositionList;

mm.acquisitions().clearRunnables();
mm.getScriptController().clearMessageWindow();

///////////////////////   definicje
laser488="Luxx-488"; //blue
laser561="Cobolt-561";   //yellow
laser638="Luxx-638"; //red

///////////////////////   KONFIGURACJA:

//tiles
ile_prawa =4;
ile_lewa =8;
ile=ile_prawa+ile_lewa;

//laser
laser = laser561; //do wyboru: laser488, laser561, laser638
//power=40; //laser power in mW here

//////////////////////     KONIEC

class LaserFunctions {
	public void laserOn(laser, power) {
		print("Attempting to start "+laser);
		StrVector properties = mmc.getDevicePropertyNames(laser);
		i_power=-1;
		i_status=-1;
		if (laser==laser561) {
			i_power=29;
			i_status=21;
			mmc.setProperty(laser, properties.get(i_status), "On");
			mmc.sleep(2000);
		} else {
			i_power=9;
			i_status=5;
			mmc.setProperty(laser, properties.get(i_status), "On");
		};
		//mmc.setProperty(laser, properties.get(i_power), power);
		status = mmc.getProperty(laser, properties.get(i_status));
		get_power = mmc.getProperty(laser, properties.get(i_power));
		print("Laser status is: "+status+", power: "+get_power);
	};


	public void laserOff() {
		StrVector properties = mmc.getDevicePropertyNames(laser);
		i_status=-1;
		if (laser==laser561) {i_status=21;}
		else {i_status=5;};
		mmc.setProperty(laser, properties.get(i_status), "Off");		
		print("laserOff executed, laser status is: "+mmc.getProperty(laser, properties.get(i_status)));
	}
}

starting = new Runnable() {
/*	
 * display messages and open correct shutter
 */
	 public void run() {
	 		GenericDialog dlg = new GenericDialog("Manual Acquisition", null);
			dlg.addMessage("Chosen laser: "+laser+". Did you change the filter and checked focus?");
			dlg.showDialog();
			if (dlg.wasCanceled()) {
				print("Aborting acquisition. Change the filter and restart.");
				mm.acquisitions().haltAcquisition();
				return;
			}
	 					
			new LaserFunctions().laserOn(laser, power);
      	
      	if (ile_prawa>0) {
      		mmc.setProperty("ShutterA_RIGHT", "State", "1"); // open
				mmc.waitForDevice("ShutterA_RIGHT");
				print("Opening RIGHT shutter");
      	} else {
      		mmc.setProperty("ShutterD_LEFT", "State", "1"); // open
				mmc.waitForDevice("ShutterD_LEFT");
				print("Opening LEFT shutter");
      	}

      	z=mmc.getPosition(zStage);
			print(z);
	 }
};

change_shutter = new Runnable() {
	public void run() {
		print("Running: change shutter");
		mmc.setProperty("ShutterA_RIGHT", "State", "0"); // close
		mmc.setProperty("ShutterD_LEFT", "State", "1"); // open
		mmc.waitForDevice("ShutterD_LEFT");
		print("Illumination changed");
	}
};

waiting = new Runnable() {
	public void run() {
		print("Waiting 2 seconds...");
		mmc.sleep(2000);
	}
};

/////////////////////////////////////////////////////////////////////
zStage = mmc.getFocusDevice();
R=mmc.getROI();

print(R);
//print(R.width);

PositionList pl = mm.positions().getPositionList() ;

npos=pl.getNumberOfPositions();
if (npos==ile) {
	print("Number of tiles: "+npos);
} else if (ile==1) {
	print("Single stack, using current XY position");
	xyStage = mmc.getXYStageDevice();
	x=mmc.getXPosition(xyStage);
	y=mmc.getYPosition(xyStage);
	z=mmc.getPosition(zStage);
	MultiStagePosition msp = new MultiStagePosition(xyStage, x, y, zStage, z);
	pl.addPosition(msp);
} else {
	print("CHECK POSITIONS!");
	print(npos+" positions in the position list");
	print(ile +" positions in this script");
	print("Aborting acquisition");
	return;
}

// -1 --> attach to all planes along given dimension
mm.acquisitions().attachRunnable(0, -1, 0, 0, waiting); // f, p, c, s 
mm.acquisitions().attachRunnable(0, 0, 0, 0, starting); // f, p, c, s 
mm.acquisitions().attachRunnable(0, ile_prawa, 0, 0, change_shutter); // f, p, c, s 

//run
mm.acquisitions().runAcquisition();

//turn off laser and display message
new LaserFunctions().laserOff();

pth_file=mm.acquisitions().getAcquisitionSettings().root()+"\\"+mm.acquisitions().getAcquisitionSettings().prefix();
print(pth_file);
//pth_file=mm.acquisitions().getAcquisitionSettings().root()+"\\"+mm.acquisitions().getAcquisitionSettings().prefix()+"_positions.txt";
//pl.save(pth_file);
//print("Positions saved to: "+pth_file);

MultiStagePosition msp=pl.getPosition(ile_prawa+1);
print("Going back to "+msp.getLabel());
MultiStagePosition.goToPosition(msp, mmc);

GenericDialog dlg = new GenericDialog("Manual Acquisition", null);
dlg.addMessage("Acquisition finished, laser is OFF");
dlg.hideCancelButton();
dlg.setOKLabel("Great, thanks!");
dlg.showDialog();