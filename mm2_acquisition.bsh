import ij.gui.GenericDialog;
import mmcorej.StrVector;
import org.micromanager.MultiStagePosition;
import org.micromanager.PositionList;

mm.acquisitions().clearRunnables();
mm.getScriptController().clearMessageWindow();

///////////////////////   definicje
laser488="Luxx-488"; //blue
laser561="Cobolt-561";   //yellow
laser638="Luxx-638"; //red

///////////////////////   KONFIGURACJA:

ile_prawa =2;
ile_lewa =2;
ile=ile_prawa+ile_lewa;

laser = laser561; //do wyboru: laser488, laser561, laser638
power=20; //laser power in mW here

//////////////////////     KONIEC

class LaserFunctions {
	public void laserOn(laser, power) {
	print("Attempting to start "+laser);
	StrVector properties = mmc.getDevicePropertyNames(laser);
	i_power=-1;
	i_status=-1;
	if (laser==laser561) {
		i_power=29;
		i_status=21;
		mmc.setProperty(laser, properties.get(i_status), "On");
		mmc.sleep(3000);
		
	} else {
		i_power=9;
		i_status=5;
		mmc.setProperty(laser, properties.get(i_status), "On");
	};
	mmc.setProperty(laser, properties.get(i_power), power);
	status = mmc.getProperty(laser, properties.get(i_status));
	print("laser status is "+status);
};


	public void laserOff() {
		StrVector properties = mmc.getDevicePropertyNames(laser);
		i_status=-1;
		if (laser==laser561) {i_status=21;}
		else {i_status=5;};
		mmc.setProperty(laser, properties.get(i_status), "Off");		
		print("laser status "+mmc.getProperty(laser, properties.get(i_status)));
	}
}

starting = new Runnable() {
/*	
 * display messages and open correct shutter
 */
	 public void run() {
	 		GenericDialog dlg = new GenericDialog("Manual Acquisition", null);
			dlg.addMessage("Chosen laser: "+laser+". Did you change the filter? What about z?");
			dlg.showDialog();
			if (dlg.wasCanceled()) {
				print("Aborting acquisition. Change the filter and restart.");
				mm.acquisitions().haltAcquisition();
				return;
			}
	 					
			new LaserFunctions().laserOn(laser, power);
      	
      	if (ile_prawa>0) {
      		mmc.setProperty("ShutterA_RIGHT", "State", "1"); // open
				mmc.waitForDevice("ShutterA_RIGHT");
				print("Opening RIGHT shutter");
      	} else {
      		mmc.setProperty("ShutterD_LEFT", "State", "1"); // open
				mmc.waitForDevice("ShutterD_LEFT");
				print("Opening LEFT shutter");
      	}
	 }
};

change_shutter = new Runnable() {
	public void run() {
		print("Running: change shutter");
		mmc.setProperty("ShutterA_RIGHT", "State", "0"); // close
		mmc.setProperty("ShutterD_LEFT", "State", "1"); // open
		mmc.waitForDevice("ShutterD_LEFT");
		print("Illumination changed");
	}
};

waiting = new Runnable() {
	public void run() {
		print("Waiting 2 seconds...");
		mmc.sleep(2000);
	}
};

/////////////////////////////////////////////////////////////////////

//mm.acquisitions().getROI;
PositionList pl = mm.positions().getPositionList() ;
npos=pl.getNumberOfPositions();
if (npos==ile) {
	print("Number of tiles: "+npos);
} else if (ile==1) {
	print("Single stack");
	xyStage = mmc.getXYStageDevice();
	zStage = mmc.getFocusDevice();
	x=mmc.getXPosition(xyStage);
	y=mmc.getYPosition(xyStage);
	z=mmc.getPosition(zStage);
	MultiStagePosition msp = new MultiStagePosition(xyStage, x, y, zStage, z);
	pl.addPosition(msp);
} else {
	print("CHECK POSITIONS!");
	print(npos+" positions in the position list");
	print(ile +" positions in this script");
	print("Aborting acquisition");
	return;
}

// -1 --> attach to all planes along given dimension

mm.acquisitions().attachRunnable(0, -1, 0, 0, waiting); // f, p, c, s 
mm.acquisitions().attachRunnable(0, 0, 0, 0, starting); // f, p, c, s 
mm.acquisitions().attachRunnable(0, ile_prawa, 0, 0, change_shutter); // f, p, c, s 

mm.acquisitions().runAcquisition();

//turn off laser and display message
new LaserFunctions().laserOff();

MultiStagePosition msp=pl.getPosition(0);
print("Going back to "+msp.getLabel());
MultiStagePosition.goToPosition(msp, mmc);

GenericDialog dlg = new GenericDialog("Manual Acquisition", null);
dlg.addMessage("Acquisition finished, laser is OFF");
dlg.hideCancelButton();
dlg.setOKLabel("Great, thanks!");
dlg.showDialog();